options:
  parameters:
    author: argilo
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: solution2
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 12.0]
    rotation: 0
    state: enabled

blocks:
- name: prn1
  id: variable
  parameters:
    comment: ''
    value: '[1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0,
      1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1,
      1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0,
      1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0,
      1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0,
      0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0,
      1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0,
      1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
      0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0,
      0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1,
      0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1,
      1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1,
      1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0,
      1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0,
      0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1,
      0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1,
      1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0,
      1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0,
      1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1,
      0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0,
      0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1,
      0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1,
      0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0,
      1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
      0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1,
      1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0,
      1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0,
      0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1,
      0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
      0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0,
      0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0,
      1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0,
      0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1,
      0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1,
      0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0,
      1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0,
      0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 276.0]
    rotation: 0
    state: true
- name: prn2
  id: variable
  parameters:
    comment: ''
    value: '[1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1,
      0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0,
      0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0,
      0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,
      1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1,
      1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1,
      1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1,
      1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1,
      0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1,
      0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0,
      0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0,
      0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1,
      1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
      1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0,
      0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1,
      0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0,
      0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0,
      0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,
      0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0,
      1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0,
      0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0,
      0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1,
      0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,
      0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0,
      1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1,
      1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1,
      0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1,
      0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1,
      1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0,
      0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0,
      0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0,
      0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1,
      1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1,
      1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0,
      1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
      0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1,
      0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
      1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1,
      0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 340.0]
    rotation: 0
    state: true
- name: prn3
  id: variable
  parameters:
    comment: ''
    value: '[1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,
      1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1,
      1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0,
      0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1,
      1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1,
      0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1,
      1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0,
      1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1,
      1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0,
      0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1,
      0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0,
      1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0,
      1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1,
      1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,
      1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1,
      0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0,
      1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0,
      0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1,
      1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0,
      0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0,
      0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0,
      0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0,
      1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0,
      0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0,
      0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0,
      0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1,
      0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0,
      0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0,
      0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0,
      0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0,
      1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1,
      0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0,
      0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0,
      0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1,
      1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1,
      0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1,
      0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1,
      1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
      1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 404.0]
    rotation: 0
    state: true
- name: psk_const
  id: variable_constellation
  parameters:
    comment: ''
    const_points: '[-1-1j, -1+1j, 1+1j, 1-1j]'
    dims: '1'
    normalization: digital.constellation.AMPLITUDE_NORMALIZATION
    precision: '8'
    rot_sym: '4'
    soft_dec_lut: None
    sym_map: '[0, 1, 3, 2]'
    type: bpsk
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [752, 660.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 1023000 * sps
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [176, 12.0]
    rotation: 0
    state: enabled
- name: sps
  id: variable
  parameters:
    comment: ''
    value: '4'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 116.0]
    rotation: 0
    state: true
- name: taps1
  id: variable
  parameters:
    comment: ''
    value: '[(prn1[n // sps]*2 - 1) / (len(prn1)*sps) for n in range(len(prn1) * sps)][::-1]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [152, 276.0]
    rotation: 0
    state: enabled
- name: taps2
  id: variable
  parameters:
    comment: ''
    value: '[(prn2[n // sps]*2 - 1) / (len(prn2)*sps) for n in range(len(prn2) * sps)][::-1]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [152, 340.0]
    rotation: 0
    state: enabled
- name: taps3
  id: variable
  parameters:
    comment: ''
    value: '[(prn3[n // sps]*2 - 1) / (len(prn3)*sps) for n in range(len(prn3) * sps)][::-1]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [152, 404.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_mag_squared_0
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [744, 24.0]
    rotation: 0
    state: true
- name: blocks_file_sink_0
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: bits2.dat
    type: byte
    unbuffered: 'False'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [440, 428.0]
    rotation: 180
    state: true
- name: blocks_file_sink_0_0
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: bits3.dat
    type: byte
    unbuffered: 'False'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1312, 180.0]
    rotation: 0
    state: true
- name: blocks_file_sink_0_0_0
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: bits4.dat
    type: byte
    unbuffered: 'False'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1312, 356.0]
    rotation: 0
    state: true
- name: blocks_file_source_0
  id: blocks_file_source
  parameters:
    affinity: ''
    alias: ''
    begin_tag: pmt.PMT_NIL
    comment: ''
    file: gold2.sigmf-data
    length: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    repeat: 'False'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [136, 148.0]
    rotation: 0
    state: true
- name: blocks_null_sink_0
  id: blocks_null_sink
  parameters:
    affinity: ''
    alias: ''
    bus_structure_sink: '[[0,],]'
    comment: ''
    num_inputs: '3'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [504, 520.0]
    rotation: 180
    state: true
- name: blocks_throttle2_0
  id: blocks_throttle2
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    limit: auto
    maximum: '0.1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate / 10
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [336, 172.0]
    rotation: 0
    state: true
- name: digital_constellation_receiver_cb_0
  id: digital_constellation_receiver_cb
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    constellation: psk_const
    fmax: '0.1'
    fmin: '-0.1'
    loop_bw: 2 * 3.14 / 100
    maxoutbuf: '0'
    minoutbuf: '0'
    showports: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [712, 488.0]
    rotation: 180
    state: true
- name: digital_constellation_receiver_cb_0_0
  id: digital_constellation_receiver_cb
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    constellation: psk_const
    fmax: '0.1'
    fmin: '-0.1'
    loop_bw: 2 * 3.14 / 100
    maxoutbuf: '0'
    minoutbuf: '0'
    showports: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1008, 200.0]
    rotation: 0
    state: true
- name: digital_constellation_receiver_cb_0_0_0
  id: digital_constellation_receiver_cb
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    constellation: psk_const
    fmax: '0.1'
    fmin: '-0.1'
    loop_bw: 2 * 3.14 / 100
    maxoutbuf: '0'
    minoutbuf: '0'
    showports: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1008, 376.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\n\n\nclass blk(gr.basic_block):\n\
      \    \"\"\"CDMA peak detect\"\"\"\n\n    def __init__(self, sps=4, sequence_length=1023):\n\
      \        \"\"\"arguments to this function show up as parameters in GRC\"\"\"\
      \n        gr.sync_block.__init__(\n            self,\n            name='CDMA\
      \ Peak Detect',\n            in_sig=[np.complex64],\n            out_sig=[np.complex64]\n\
      \        )\n\n        self.sps = sps\n        self.sequence_length = sequence_length\n\
      \n        self.synchronized = False\n        self.skip = 0\n        self.buffer_len\
      \ = self.sps * self.sequence_length\n        self.buffer = np.zeros(self.buffer_len,\
      \ dtype=np.complex64)\n        self.buffer_offset = 0\n\n        self.set_relative_rate(1,\
      \ self.buffer_len)\n\n    def work(self, input_items, output_items):\n     \
      \   #print(\"work\", len(input_items[0]), len(output_items[0]))\n        in_offset\
      \ = 0\n        out_offset = 0\n        while in_offset < len(input_items[0]):\n\
      \            if self.skip > 0:\n                #print(\"need to skip\", self.skip)\n\
      \                n_to_skip = min(len(input_items[0]) - in_offset, self.skip)\n\
      \                #print(\"skipping\", n_to_skip)\n                in_offset\
      \ += n_to_skip\n                self.skip -= n_to_skip\n            else:\n\
      \                n_to_copy = min(len(input_items[0]) - in_offset, self.buffer_len\
      \ - self.buffer_offset)\n                self.buffer[self.buffer_offset:self.buffer_offset\
      \ + n_to_copy] = input_items[0][in_offset:in_offset + n_to_copy]\n         \
      \       in_offset += n_to_copy\n                self.buffer_offset += n_to_copy\n\
      \                if self.buffer_offset == self.buffer_len:\n               \
      \     mag2 = self.buffer.real**2 + self.buffer.imag**2\n                   \
      \ avg_mag2 = np.average(mag2)\n                    argmax_mag2 = np.argmax(mag2)\n\
      \                    if self.synchronized:\n                        #print(\"\
      synchronized, offset = \", argmax_mag2)\n                        error = argmax_mag2\
      \ - self.buffer_len // 2 \n                        if abs(error) > self.sps:\n\
      \                            print(\"lost sync\")\n                        \
      \    self.synchronized = False\n                        else:\n            \
      \                output_items[0][out_offset] = self.buffer[argmax_mag2]\n  \
      \                          out_offset += 1\n                            if error\
      \ > 0:\n                                self.skip = error\n                \
      \            elif error < 0:\n                                in_offset += error\n\
      \                    else:\n                        if (mag2[argmax_mag2] >\
      \ avg_mag2 * 20):\n                            self.synchronized = True\n  \
      \                          self.skip = argmax_mag2 - (self.buffer_len // 2)\n\
      \                            if self.skip < 0:\n                           \
      \     self.skip += self.buffer_len\n                    \n                 \
      \   self.buffer_offset = 0\n                    \n                    \n   \
      \     self.consume(0, in_offset)\n        return out_offset\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    sequence_length: '1023'
    sps: '4'
  states:
    _io_cache: ('CDMA Peak Detect', 'blk', [('sps', '4'), ('sequence_length', '1023')],
      [('0', 'complex', 1)], [('0', 'complex', 1)], 'CDMA peak detect', ['sequence_length',
      'sps'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [744, 172.0]
    rotation: 0
    state: true
- name: epy_block_0_0
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\n\n\nclass blk(gr.basic_block):\n\
      \    \"\"\"CDMA peak detect\"\"\"\n\n    def __init__(self, sps=4, sequence_length=1023):\n\
      \        \"\"\"arguments to this function show up as parameters in GRC\"\"\"\
      \n        gr.sync_block.__init__(\n            self,\n            name='CDMA\
      \ Peak Detect',\n            in_sig=[np.complex64],\n            out_sig=[np.complex64]\n\
      \        )\n\n        self.sps = sps\n        self.sequence_length = sequence_length\n\
      \n        self.synchronized = False\n        self.skip = 0\n        self.buffer_len\
      \ = self.sps * self.sequence_length\n        self.buffer = np.zeros(self.buffer_len,\
      \ dtype=np.complex64)\n        self.buffer_offset = 0\n\n        self.set_relative_rate(1,\
      \ self.buffer_len)\n\n    def work(self, input_items, output_items):\n     \
      \   #print(\"work\", len(input_items[0]), len(output_items[0]))\n        in_offset\
      \ = 0\n        out_offset = 0\n        while in_offset < len(input_items[0]):\n\
      \            if self.skip > 0:\n                #print(\"need to skip\", self.skip)\n\
      \                n_to_skip = min(len(input_items[0]) - in_offset, self.skip)\n\
      \                #print(\"skipping\", n_to_skip)\n                in_offset\
      \ += n_to_skip\n                self.skip -= n_to_skip\n            else:\n\
      \                n_to_copy = min(len(input_items[0]) - in_offset, self.buffer_len\
      \ - self.buffer_offset)\n                self.buffer[self.buffer_offset:self.buffer_offset\
      \ + n_to_copy] = input_items[0][in_offset:in_offset + n_to_copy]\n         \
      \       in_offset += n_to_copy\n                self.buffer_offset += n_to_copy\n\
      \                if self.buffer_offset == self.buffer_len:\n               \
      \     mag2 = self.buffer.real**2 + self.buffer.imag**2\n                   \
      \ avg_mag2 = np.average(mag2)\n                    argmax_mag2 = np.argmax(mag2)\n\
      \                    if self.synchronized:\n                        #print(\"\
      synchronized, offset = \", argmax_mag2)\n                        error = argmax_mag2\
      \ - self.buffer_len // 2 \n                        if abs(error) > self.sps:\n\
      \                            print(\"lost sync\")\n                        \
      \    self.synchronized = False\n                        else:\n            \
      \                output_items[0][out_offset] = self.buffer[argmax_mag2]\n  \
      \                          out_offset += 1\n                            if error\
      \ > 0:\n                                self.skip = error\n                \
      \            elif error < 0:\n                                in_offset += error\n\
      \                    else:\n                        if (mag2[argmax_mag2] >\
      \ avg_mag2 * 20):\n                            self.synchronized = True\n  \
      \                          self.skip = argmax_mag2 - (self.buffer_len // 2)\n\
      \                            if self.skip < 0:\n                           \
      \     self.skip += self.buffer_len\n                    \n                 \
      \   self.buffer_offset = 0\n                    \n                    \n   \
      \     self.consume(0, in_offset)\n        return out_offset\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    sequence_length: '1023'
    sps: '4'
  states:
    _io_cache: ('CDMA Peak Detect', 'blk', [('sps', '4'), ('sequence_length', '1023')],
      [('0', 'complex', 1)], [('0', 'complex', 1)], 'CDMA peak detect', ['sequence_length',
      'sps'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [744, 252.0]
    rotation: 0
    state: true
- name: epy_block_0_0_0
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\n\n\nclass blk(gr.basic_block):\n\
      \    \"\"\"CDMA peak detect\"\"\"\n\n    def __init__(self, sps=4, sequence_length=1023):\n\
      \        \"\"\"arguments to this function show up as parameters in GRC\"\"\"\
      \n        gr.sync_block.__init__(\n            self,\n            name='CDMA\
      \ Peak Detect',\n            in_sig=[np.complex64],\n            out_sig=[np.complex64]\n\
      \        )\n\n        self.sps = sps\n        self.sequence_length = sequence_length\n\
      \n        self.synchronized = False\n        self.skip = 0\n        self.buffer_len\
      \ = self.sps * self.sequence_length\n        self.buffer = np.zeros(self.buffer_len,\
      \ dtype=np.complex64)\n        self.buffer_offset = 0\n\n        self.set_relative_rate(1,\
      \ self.buffer_len)\n\n    def work(self, input_items, output_items):\n     \
      \   #print(\"work\", len(input_items[0]), len(output_items[0]))\n        in_offset\
      \ = 0\n        out_offset = 0\n        while in_offset < len(input_items[0]):\n\
      \            if self.skip > 0:\n                #print(\"need to skip\", self.skip)\n\
      \                n_to_skip = min(len(input_items[0]) - in_offset, self.skip)\n\
      \                #print(\"skipping\", n_to_skip)\n                in_offset\
      \ += n_to_skip\n                self.skip -= n_to_skip\n            else:\n\
      \                n_to_copy = min(len(input_items[0]) - in_offset, self.buffer_len\
      \ - self.buffer_offset)\n                self.buffer[self.buffer_offset:self.buffer_offset\
      \ + n_to_copy] = input_items[0][in_offset:in_offset + n_to_copy]\n         \
      \       in_offset += n_to_copy\n                self.buffer_offset += n_to_copy\n\
      \                if self.buffer_offset == self.buffer_len:\n               \
      \     mag2 = self.buffer.real**2 + self.buffer.imag**2\n                   \
      \ avg_mag2 = np.average(mag2)\n                    argmax_mag2 = np.argmax(mag2)\n\
      \                    if self.synchronized:\n                        #print(\"\
      synchronized, offset = \", argmax_mag2)\n                        error = argmax_mag2\
      \ - self.buffer_len // 2 \n                        if abs(error) > self.sps:\n\
      \                            print(\"lost sync\")\n                        \
      \    self.synchronized = False\n                        else:\n            \
      \                output_items[0][out_offset] = self.buffer[argmax_mag2]\n  \
      \                          out_offset += 1\n                            if error\
      \ > 0:\n                                self.skip = error\n                \
      \            elif error < 0:\n                                in_offset += error\n\
      \                    else:\n                        if (mag2[argmax_mag2] >\
      \ avg_mag2 * 20):\n                            self.synchronized = True\n  \
      \                          self.skip = argmax_mag2 - (self.buffer_len // 2)\n\
      \                            if self.skip < 0:\n                           \
      \     self.skip += self.buffer_len\n                    \n                 \
      \   self.buffer_offset = 0\n                    \n                    \n   \
      \     self.consume(0, in_offset)\n        return out_offset\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    sequence_length: '1023'
    sps: '4'
  states:
    _io_cache: ('CDMA Peak Detect', 'blk', [('sps', '4'), ('sequence_length', '1023')],
      [('0', 'complex', 1)], [('0', 'complex', 1)], 'CDMA peak detect', ['sequence_length',
      'sps'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [744, 332.0]
    rotation: 0
    state: true
- name: fft_filter_xxx_0
  id: fft_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    samp_delay: '0'
    taps: taps1
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [544, 164.0]
    rotation: 0
    state: true
- name: fft_filter_xxx_0_0
  id: fft_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    samp_delay: '0'
    taps: taps2
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [544, 244.0]
    rotation: 0
    state: true
- name: fft_filter_xxx_0_0_0
  id: fft_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    samp_delay: '0'
    taps: taps3
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [544, 324.0]
    rotation: 0
    state: true
- name: qtgui_const_sink_x_0
  id: qtgui_const_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: '"blue"'
    color10: '"red"'
    color2: '"red"'
    color3: '"red"'
    color4: '"red"'
    color5: '"red"'
    color6: '"red"'
    color7: '"red"'
    color8: '"red"'
    color9: '"red"'
    comment: ''
    grid: 'False'
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '0'
    marker10: '0'
    marker2: '0'
    marker3: '0'
    marker4: '0'
    marker5: '0'
    marker6: '0'
    marker7: '0'
    marker8: '0'
    marker9: '0'
    name: '""'
    nconnections: '1'
    size: '50'
    style1: '0'
    style10: '0'
    style2: '0'
    style3: '0'
    style4: '0'
    style5: '0'
    style6: '0'
    style7: '0'
    style8: '0'
    style9: '0'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    xmax: '2'
    xmin: '-2'
    ymax: '2'
    ymin: '-2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [408, 636.0]
    rotation: 180
    state: true
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: '65536'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.01'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [744, 76.0]
    rotation: 0
    state: true
- name: qtgui_time_sink_x_1
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: '65536'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [952, 92.0]
    rotation: 0
    state: true

connections:
- [blocks_complex_to_mag_squared_0, '0', qtgui_time_sink_x_1, '0']
- [blocks_file_source_0, '0', blocks_throttle2_0, '0']
- [blocks_throttle2_0, '0', fft_filter_xxx_0, '0']
- [blocks_throttle2_0, '0', fft_filter_xxx_0_0, '0']
- [blocks_throttle2_0, '0', fft_filter_xxx_0_0_0, '0']
- [digital_constellation_receiver_cb_0, '0', blocks_file_sink_0, '0']
- [digital_constellation_receiver_cb_0, '1', blocks_null_sink_0, '0']
- [digital_constellation_receiver_cb_0, '2', blocks_null_sink_0, '1']
- [digital_constellation_receiver_cb_0, '3', blocks_null_sink_0, '2']
- [digital_constellation_receiver_cb_0, '4', qtgui_const_sink_x_0, '0']
- [digital_constellation_receiver_cb_0_0, '0', blocks_file_sink_0_0, '0']
- [digital_constellation_receiver_cb_0_0_0, '0', blocks_file_sink_0_0_0, '0']
- [epy_block_0, '0', digital_constellation_receiver_cb_0, '0']
- [epy_block_0_0, '0', digital_constellation_receiver_cb_0_0, '0']
- [epy_block_0_0_0, '0', digital_constellation_receiver_cb_0_0_0, '0']
- [fft_filter_xxx_0, '0', blocks_complex_to_mag_squared_0, '0']
- [fft_filter_xxx_0, '0', epy_block_0, '0']
- [fft_filter_xxx_0, '0', qtgui_time_sink_x_0, '0']
- [fft_filter_xxx_0_0, '0', epy_block_0_0, '0']
- [fft_filter_xxx_0_0_0, '0', epy_block_0_0_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.7.0
